//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NIMBOLE.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NIMBOLEContext : DbContext
    {
        public NIMBOLEContext()
            : base("name=NIMBOLEContext")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TblAccount> TblAccounts { get; set; }
        public virtual DbSet<TblAccountHierarchy> TblAccountHierarchies { get; set; }
        public virtual DbSet<TblAccountType> TblAccountTypes { get; set; }
        public virtual DbSet<TblActivity> TblActivities { get; set; }
        public virtual DbSet<TblActivityNotify> TblActivityNotifies { get; set; }
        public virtual DbSet<TblAddress> TblAddresses { get; set; }
        public virtual DbSet<TblAddressContact> TblAddressContacts { get; set; }
        public virtual DbSet<TblAddressEmployee> TblAddressEmployees { get; set; }
        public virtual DbSet<TblCity> TblCities { get; set; }
        public virtual DbSet<TblContact> TblContacts { get; set; }
        public virtual DbSet<TblContactRole> TblContactRoles { get; set; }
        public virtual DbSet<TblCountry> TblCountries { get; set; }
        public virtual DbSet<TblDepartment> TblDepartments { get; set; }
        public virtual DbSet<TblDocument> TblDocuments { get; set; }
        public virtual DbSet<TblEmpHierarchy> TblEmpHierarchies { get; set; }
        public virtual DbSet<TblEmployee> TblEmployees { get; set; }
        public virtual DbSet<TblEmployeeRole> TblEmployeeRoles { get; set; }
        public virtual DbSet<TblEmployeeTarget> TblEmployeeTargets { get; set; }
        public virtual DbSet<TblEmpTask> TblEmpTasks { get; set; }
        public virtual DbSet<TblFinancialYear> TblFinancialYears { get; set; }
        public virtual DbSet<TblIndustry> TblIndustries { get; set; }
        public virtual DbSet<TblLanguage> TblLanguages { get; set; }
        public virtual DbSet<TblLead> TblLeads { get; set; }
        public virtual DbSet<TblLeadContact> TblLeadContacts { get; set; }
        public virtual DbSet<TblLeadSource> TblLeadSources { get; set; }
        public virtual DbSet<TblLocation> TblLocations { get; set; }
        public virtual DbSet<TblLogin> TblLogins { get; set; }
        public virtual DbSet<TblLoginHistory> TblLoginHistories { get; set; }
        public virtual DbSet<TblMileStone> TblMileStones { get; set; }
        public virtual DbSet<TblMileStoneStage> TblMileStoneStages { get; set; }
        public virtual DbSet<TblModule> TblModules { get; set; }
        public virtual DbSet<TblOrgHierarchy> TblOrgHierarchies { get; set; }
        public virtual DbSet<TblOwnership> TblOwnerships { get; set; }
        public virtual DbSet<TblParentAccount> TblParentAccounts { get; set; }
        public virtual DbSet<TblProduct> TblProducts { get; set; }
        public virtual DbSet<TblProductType> TblProductTypes { get; set; }
        public virtual DbSet<TblSetting> TblSettings { get; set; }
        public virtual DbSet<TblState> TblStates { get; set; }
        public virtual DbSet<TblTranAccAdd> TblTranAccAdds { get; set; }
        public virtual DbSet<TblTranLeadContact> TblTranLeadContacts { get; set; }
        public virtual DbSet<TblTransContact> TblTransContacts { get; set; }
        public virtual DbSet<TblTransDocument> TblTransDocuments { get; set; }
        public virtual DbSet<TblTransETask> TblTransETasks { get; set; }
        public virtual DbSet<TblTransLead> TblTransLeads { get; set; }
        public virtual DbSet<TblTransLeadCompetitor> TblTransLeadCompetitors { get; set; }
        public virtual DbSet<TblTransLeadPriceDiscount> TblTransLeadPriceDiscounts { get; set; }
        public virtual DbSet<TblUser> TblUsers { get; set; }
        public virtual DbSet<TblUserAddress> TblUserAddresses { get; set; }
        public virtual DbSet<VWAccountIndex> VWAccountIndexes { get; set; }
        public virtual DbSet<VWActivityMileStone> VWActivityMileStones { get; set; }
        public virtual DbSet<VWEmpActivityNotify> VWEmpActivityNotifies { get; set; }
        public virtual DbSet<VWEmployeeTarget> VWEmployeeTargets { get; set; }
        public virtual DbSet<VWLeadLsEmp> VWLeadLsEmps { get; set; }
        public virtual DbSet<VWLgnEmployee> VWLgnEmployees { get; set; }
        public virtual DbSet<VWLoginEmployee> VWLoginEmployees { get; set; }
        public virtual DbSet<VWTranDocument> VWTranDocuments { get; set; }
        public virtual DbSet<VWTrnContactAccount> VWTrnContactAccounts { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
        public virtual DbSet<VWContactExport> VWContactExports { get; set; }
        public virtual DbSet<VWProductExport> VWProductExports { get; set; }
        public virtual DbSet<VWAccountExport> VWAccountExports { get; set; }
    
        public virtual int sp_InsertInitialData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertInitialData");
        }
    
        public virtual int sp_desc(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_desc", tableNameParameter);
        }
    
        public virtual ObjectResult<string> sp_generate_inserts(string table_name, string target_table, Nullable<bool> include_column_list, string from, Nullable<bool> include_timestamp, Nullable<bool> debug_mode, string owner, Nullable<bool> ommit_images, Nullable<bool> ommit_identity, Nullable<int> top, string cols_to_include, string cols_to_exclude, Nullable<bool> disable_constraints, Nullable<bool> ommit_computed_cols)
        {
            var table_nameParameter = table_name != null ?
                new ObjectParameter("table_name", table_name) :
                new ObjectParameter("table_name", typeof(string));
    
            var target_tableParameter = target_table != null ?
                new ObjectParameter("target_table", target_table) :
                new ObjectParameter("target_table", typeof(string));
    
            var include_column_listParameter = include_column_list.HasValue ?
                new ObjectParameter("include_column_list", include_column_list) :
                new ObjectParameter("include_column_list", typeof(bool));
    
            var fromParameter = from != null ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(string));
    
            var include_timestampParameter = include_timestamp.HasValue ?
                new ObjectParameter("include_timestamp", include_timestamp) :
                new ObjectParameter("include_timestamp", typeof(bool));
    
            var debug_modeParameter = debug_mode.HasValue ?
                new ObjectParameter("debug_mode", debug_mode) :
                new ObjectParameter("debug_mode", typeof(bool));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("owner", owner) :
                new ObjectParameter("owner", typeof(string));
    
            var ommit_imagesParameter = ommit_images.HasValue ?
                new ObjectParameter("ommit_images", ommit_images) :
                new ObjectParameter("ommit_images", typeof(bool));
    
            var ommit_identityParameter = ommit_identity.HasValue ?
                new ObjectParameter("ommit_identity", ommit_identity) :
                new ObjectParameter("ommit_identity", typeof(bool));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var cols_to_includeParameter = cols_to_include != null ?
                new ObjectParameter("cols_to_include", cols_to_include) :
                new ObjectParameter("cols_to_include", typeof(string));
    
            var cols_to_excludeParameter = cols_to_exclude != null ?
                new ObjectParameter("cols_to_exclude", cols_to_exclude) :
                new ObjectParameter("cols_to_exclude", typeof(string));
    
            var disable_constraintsParameter = disable_constraints.HasValue ?
                new ObjectParameter("disable_constraints", disable_constraints) :
                new ObjectParameter("disable_constraints", typeof(bool));
    
            var ommit_computed_colsParameter = ommit_computed_cols.HasValue ?
                new ObjectParameter("ommit_computed_cols", ommit_computed_cols) :
                new ObjectParameter("ommit_computed_cols", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_generate_inserts", table_nameParameter, target_tableParameter, include_column_listParameter, fromParameter, include_timestampParameter, debug_modeParameter, ownerParameter, ommit_imagesParameter, ommit_identityParameter, topParameter, cols_to_includeParameter, cols_to_excludeParameter, disable_constraintsParameter, ommit_computed_colsParameter);
        }
    
        public virtual ObjectResult<sp_LeadsByMilestone_Result> sp_LeadsByMilestone(string milestone)
        {
            var milestoneParameter = milestone != null ?
                new ObjectParameter("Milestone", milestone) :
                new ObjectParameter("Milestone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeadsByMilestone_Result>("sp_LeadsByMilestone", milestoneParameter);
        }
    
        public virtual ObjectResult<sp_LeadsByMilestoneNew_Result> sp_LeadsByMilestoneNew()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeadsByMilestoneNew_Result>("sp_LeadsByMilestoneNew");
        }
    
        public virtual ObjectResult<sp_SalesFunnel_Result> sp_SalesFunnel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SalesFunnel_Result>("sp_SalesFunnel");
        }
    
        public virtual int sp_TargetVsActual(Nullable<int> employeeId, string finYear)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TargetVsActual", employeeIdParameter, finYearParameter);
        }
    
        public virtual ObjectResult<sp_SubordinatesByRoleOrder_Result> sp_SubordinatesByRoleOrder(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SubordinatesByRoleOrder_Result>("sp_SubordinatesByRoleOrder", employeeIdParameter);
        }
    
        public virtual int sp_CreateInsertQuery(string schemaName, string tableName, string whereClause, string startDt, string endDt, Nullable<int> topNo)
        {
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("SchemaName", schemaName) :
                new ObjectParameter("SchemaName", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var startDtParameter = startDt != null ?
                new ObjectParameter("StartDt", startDt) :
                new ObjectParameter("StartDt", typeof(string));
    
            var endDtParameter = endDt != null ?
                new ObjectParameter("EndDt", endDt) :
                new ObjectParameter("EndDt", typeof(string));
    
            var topNoParameter = topNo.HasValue ?
                new ObjectParameter("TopNo", topNo) :
                new ObjectParameter("TopNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreateInsertQuery", schemaNameParameter, tableNameParameter, whereClauseParameter, startDtParameter, endDtParameter, topNoParameter);
        }
    
        public virtual int sp_TargetVsActualTemp(Nullable<int> employeeId, string finYear)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TargetVsActualTemp", employeeIdParameter, finYearParameter);
        }
    
        public virtual ObjectResult<sp_GetLeads_Result> sp_GetLeads(Nullable<int> pageSize, Nullable<int> pageNumber, ObjectParameter recordCount)
        {
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLeads_Result>("sp_GetLeads", pageSizeParameter, pageNumberParameter, recordCount);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SubordinateIdsByEmpIdAndRoleOrder(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SubordinateIdsByEmpIdAndRoleOrder", empIdParameter);
        }
    }
}
